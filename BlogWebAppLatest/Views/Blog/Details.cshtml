@using BlogWebApp.Models.IdentityModel
@using BlogWebApp.ViewModel;
@model BlogDetailsVM;

@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@{
    TempData["Title"] = "Blog-Detials";
            // Layout = "";
}

<style>
    .vote-btn {
        cursor: pointer;
    }

        .vote-btn i {
            margin-right: 5px;
        }

        .vote-btn span {
            margin-right: 3px;
        }

        .vote-btn.upvote-btn.active {
            background-color: #198754 !important;
            color: white;
        }

        .vote-btn.active i {
            color: white !important;
        }

        .vote-btn:hover i {
            color: white !important;
        }

        .vote-btn.downvote-btn.active {
            background-color: #dc3545 !important;
            color: white;
        }

    .comment:hover .removeCmtBtn {
        display: block !important;
    }
</style>
<!-- ======= Blog Details Section ======= -->
<section id="blog" class="blog">
    <div class="container" data-aos="fade-up">

        <div class="row g-5">

            <div class="col-lg-8">
                <article class="blog-details">

                    @*   <div class="post-img">
                    <img src="assets/img/blog/blog-1.jpg" alt="" class="img-fluid">
                    </div> *@
                    <!-- Slides with indicators -->
                    @if (Model.BlogImages.Count() > 0)
                    {
                        <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-indicators">
                                @{
                                    var index = 0;
                                }
                                @foreach (var imageItem in Model.BlogImages)
                                {
                                    index++;
                                    <button type="button" data-bs-target="#carouselExampleIndicators@(index)" data-bs-slide-to="@index" class="" aria-label="Slide @index" @(index == 1 ? "class='active' aria-current='true'" : "")></button>
                                }
                            </div>
                            <div class="carousel-inner">
                                @{
                                    var imageIndex = 0;
                                }
                                @foreach (var imageItem in Model.BlogImages)
                                {
                                    imageIndex++;
                                    <div class="carousel-item @(imageIndex == 1 ? "active" : "notactive")">
                                        <img src="~/Uploads/@imageItem.Url" class="d-block w-100" alt="@imageItem.ImageName">
                                    </div>
                                }

                                @*   <div class="carousel-item">
                            <img src="assets/img/slides-2.jpg" class="d-block w-100" alt="...">
                            </div>
                            <div class="carousel-item active">
                            <img src="assets/img/slides-3.jpg" class="d-block w-100" alt="...">
                            </div> *@
                            </div>

                            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>

                        </div>

                    }
                    <!-- End Slides with indicators -->

                    <h2 class="title"> @Model.Title </h2>

                    <div class="meta-top blogDetails" blog-id="@Model.Id">
                        @*  <div class="d-flex justify-content-center">

                        </div> *@
                        <ul>
                            <li class="d-flex align-items-center">
                                <div class="row justify-content-center">
                                    <div class="col-auto">
                                        <div class="btn-group mb-sm-3" role="group" aria-label="Vote Buttons">
                                            <button type="button" category="Blog" entityid="@Model.Id" class="btn btn-outline-success upvote-btn vote-btn @(Model.IsVoted == true && Model.VoteType == "Upvote" ? "active" : "")" IsVoted="@(Model.IsVoted == true && Model.VoteType == "Upvote" ? "true" : "false")" data-type="Upvote">
                                                <span id="upvote-count" class="badge bg-success"> @Model.TotalUpvote </span> <i class="bi bi-arrow-up"></i> Upvote
                                            </button>
                                            <button type="button" category="Blog"entityid="@Model.Id" class="btn btn-outline-danger downvote-btn vote-btn  @(Model.IsVoted==true && Model.VoteType=="Downvote"? "active":"" )" IsVoted="@(Model.IsVoted == true && Model.VoteType == "Downvote" ? "true" : "false")" data-type="Downvote">
                                                <span id="downvote-count" class="badge bg-danger">  @Model.TotalDownvote </span> <i class="bi bi-arrow-down"></i> Downvote
                                            </button>
                                        </div>

                                    </div>
                                </div>
                            </li>
                            <li class="d-flex align-items-center"><i class="bi bi-person"></i> <a href="#"> @Model.BlogUser.UserName </a></li>
                            <li class="d-flex align-items-center"><i class="bi bi-clock"></i> <a href="#"><time datetime="2020-01-01"> @Model.PublishedDate.ToString("dd MMM yyyy") </time></a></li>
                            <li class="d-flex align-items-center"><i class="bi bi-chat-dots"></i> <a>@Model.TotalComments Comments</a></li>
                        </ul>
                    </div><!-- End meta top -->

                    <div class="content">
                        @Html.Raw(@Model.Body)

                    </div><!-- End post content -->
                    @*   <div class="meta-bottom">
                    <i class="bi bi-folder"></i>
                    <ul class="cats">
                    <li><a href="#">Business</a></li>
                    </ul>

                    <i class="bi bi-tags"></i>
                    <ul class="tags">
                    <li><a href="#">Creative</a></li>
                    <li><a href="#">Tips</a></li>
                    <li><a href="#">Marketing</a></li>
                    </ul>
                    </div><!-- End meta bottom --> *@

                </article><!-- End blog post -->

                <div class="post-author d-flex align-items-center">
                    <img src="~/Uploads/@Model.BlogUser?.ProfileUrl" class="rounded-circle flex-shrink-0" alt="">
                    <div>
                        <h4> @Model.BlogUser?.UserName</h4>
                        @*   <div class="social-links">
                        <a href="https://twitters.com/#"><i class="bi bi-twitter"></i></a>
                        <a href="https://facebook.com/#"><i class="bi bi-facebook"></i></a>
                        <a href="https://instagram.com/#"><i class="biu bi-instagram"></i></a>
                        </div> *@
                        <p>
                           @Model.BlogUser?.Bio
                        </p>
                    </div>
                </div><!-- End post author -->

                <div class="comments">

                    <h4 class="comments-count"> @Model.TotalComments Comments</h4>
                    @{
                        var i = 0;
                    }
                    @foreach (var comment in Model.BlogComments)
                    {
                        i++;
                        <div id="comment-@i" class="comment">
                            <div class="d-flex">
                                <div class="comment-img"><img src="~/Uploads/@comment.Url" alt=""></div>
                                <div>
                                    <h5>
                                        <a>  @comment.UserName</a> @if (SignInManager.IsSignedIn(User))
                                        {
                                            @* var user = await UserManager.GetUserAsync(User); *@
                                            <a role="button" comment-id="@comment.CommentId" class="reply cmtReplyBtn"><i class="bi bi-reply-fill"></i> Reply</a>
                                        }
                                    </h5>
                                    <time datetime=" @comment.CreationDate"> @comment.CreationDate.ToString("dd MMM yyyy") </time>
                                    <p>
                                        @comment.Content
                                    </p>
                                </div>
                            </div>
                            <div class="btn-group" role="group" aria-label="Vote Buttons">
                                <button type="button" category="Comment" entityid="@comment.CommentId" class="btn btn-sm btn-outline-success upvote-btn vote-btn  @(Model.IsVoted == true && Model.VoteType == "Upvote" ? "active" : "") data-type="Upvote">
                                    <span id="upvote-count" class="badge bg-success"> @comment.TotalUpvote </span> <i class="bi bi-arrow-up"></i>
                                </button>
                                <button type="button" category="Comment" entityid="@comment.CommentId" class="btn btn-sm btn-outline-danger downvote-btn vote-btn  @(Model.IsVoted == true && Model.VoteType == "Downvote" ? "active" : "")" IsVoted="@(Model.IsVoted == true && Model.VoteType == "Upvote" ? "true" : "false")" data-type="Downvote">
                                    <span id="downvote-count" class="badge bg-danger">  @comment.TotalDownvote </span> <i class="bi bi-arrow-down"></i>
                                </button>
                                @if (SignInManager.IsSignedIn(User))
                                {
                                var user = await UserManager.GetUserAsync(User);
                                    if(user?.Id== comment.CommentedBy.ToString())
                                    {
                                         <button style="display:none;" type="button" entityid="@comment.CommentId" class="btn btn-sm ms-1 btn-outline-danger removeCmtBtn remove-btn" data-type="Delete">
                                             <i class="bi bi-trash"></i>
                                        </button>
                                        
                                    }
                                }
                            </div>

                        </div>

                        @foreach (var reply in comment.CommentReplies)
                        {
                            <div id="comment-@i" class="comment comment-reply">
                                <div class="d-flex">
                                    <div class="comment-img"><img src="~/Uploads/@reply.Url" alt=""></div>
                                    <div>
                                        <h5><a> @reply.UserName</a> @* <a role="button" comment-id="@comment.CommentId" class="reply cmtReplyBtn"><i class="bi bi-reply-fill"></i> Reply</a> *@</h5>
                                        <time datetime=" @comment.CreationDate"> @reply.Timestamp.ToString("dd MMM yyyy") </time>
                                        <p>
                                            @reply.Content
                                        </p>
                                    </div>
                                </div>

                            </div>
                        }
                    }

                    <!-- End comment #1 -->
                    @if(SignInManager.IsSignedIn(User))
                    {
                        var user = await UserManager.GetUserAsync(User);

                        <div class="reply-form">
                            <h4>Leave a Comments</h4>
                            @* <p>Your email address will not be published. Required fields are marked * </p> *@
                            <form>
                                <div class="row">
                                    <div class="col form-group">
                                        <textarea name="comment" class="form-control" placeholder="Your Comment*"></textarea>
                                    </div>
                                </div>
                                <button type="button" class="btn commentBtn btn-sm btn-primary">Post Comment</button>

                            </form>

                        </div>
                    }
                </div><!-- End blog comments -->

            </div>

            <div class="col-lg-4">

                <div class="sidebar">
                    @*
                    <div class="sidebar-item search-form">
                    <h3 class="sidebar-title">Search</h3>
                    <form action="" class="mt-3">
                    <input type="text">
                    <button type="submit"><i class="bi bi-search"></i></button>
                    </form>
                    </div><!-- End sidebar search formn-->

                    <div class="sidebar-item categories">
                    <h3 class="sidebar-title">Categories</h3>
                    <ul class="mt-3">
                    <li><a href="#">General <span>(25)</span></a></li>
                    <li><a href="#">Lifestyle <span>(12)</span></a></li>
                    <li><a href="#">Travel <span>(5)</span></a></li>
                    <li><a href="#">Design <span>(22)</span></a></li>
                    <li><a href="#">Creative <span>(8)</span></a></li>
                    <li><a href="#">Educaion <span>(14)</span></a></li>
                    </ul>
                    </div><!-- End sidebar categories--> *@

                    <div class="sidebar-item recent-posts">
                        <h3 class="sidebar-title">Recent Posts</h3>

                        <div class="mt-3" id="recent-posts">

                            <div class="post-item mt-3">
                                <img src="assets/img/blog/blog-recent-1.jpg" alt="">
                                <div>
                                    <h4><a href="#">Nihil blanditiis at in nihil autem</a></h4>
                                    <time datetime="2020-01-01">Jan 1, 2020</time>
                                </div>
                            </div><!-- End recent post item-->

                        </div>

                    </div><!-- End sidebar recent posts-->

                    <div class="sidebar-item recent-posts">
                        <h3 class="sidebar-title">Most Popular Posts</h3>

                        <div class="mt-3" id="popular-posts">

                            <div class="post-item mt-3">
                                <img src="assets/img/blog/blog-recent-1.jpg" alt="">
                                <div>
                                    <h4><a href="#">Nihil blanditiis at in nihil autem</a></h4>
                                    <time datetime="2020-01-01">Jan 1, 2020</time>
                                </div>
                            </div><!-- End recent post item-->

                        </div>

                    </div>

                </div><!-- End Blog Sidebar -->

            </div>
        </div>

    </div>
</section><!-- End Blog Details Section -->
@* <style href="~/toastr/js/toastr.js" rel="stylesheet"></style> *@
<link href="~/toastr/css/toastr.css" rel="stylesheet" />
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/toastr/js/toastr.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        function fetchData(url, method, data, successCallback, errorCallback) {
            $.ajax({
                url: url,
                type: method,

                success: successCallback,
                error: errorCallback
            });
        }

        function renderPosts(posts, containerSelector) {

            var $container = $(containerSelector);
            $container.empty();

            $.each(posts, function (index, post) {

                var postHtml = ` <div class="post-item">
                                                <img src="/Uploads/${post.blogImage}" alt="">
                                            <div>
                                                   <h4><a href="/blog-details?id=${post.id}">  ${post.title} </a></h4>
                                                    <time datetime="${post.publishedDate}">${post.publishedDate}</time>
                                            </div>
                                        </div>`;

                $container.append(postHtml);
            });
        }

        $.ajax({
            url: '/Blog/GetPopularAndRecentPosts', // Replace 'YourController' with the name of your controller
            type: 'GET',
            dataType: 'json',
            success: function (data) {

                renderPosts(data.popularPosts, '#popular-posts');
                renderPosts(data.recentPosts, '#recent-posts');
            },
            error: function (xhr, status, error) {
                // Handle error
                console.error('Error fetching popular and recent posts:', error);
            }
        });


        // Handle upvote and downvote clicks
        $('.vote-btn').click(function () {
            // console.log('@SignInManager.IsSignedIn(User)'=='True');
            if ('@SignInManager.IsSignedIn(User)' == 'True') {
           
            var type = $(this).data('type');
            var alreadyVoted = $(this).attr("IsVoted");
            if (alreadyVoted == "true") {
                removeReaction($(this).attr("EntityId"));
                return;
            }

            toggleVote($(this), type);
            }else{
                toastr.error('Login to React');
            }

        });

        function removeReaction(id) {
            $.ajax({
                url: '/Reaction/DeleteReaction/' + id,
                type: 'DELETE',
                success: function (response) {
                    toastr.success('Reaction removed.');

                },
                error: function (xhr, status, error) {
                    // Handle error response
                    toastr.error('Error removing reaction');
                }
            });
        }


        // Function to handle toggling of vote buttons
        function toggleVote($btn, type) {
            var $otherBtn = (type === 'Upvote') ? $('.vote-btn[data-type="Downvote"]') : $('.vote-btn[data-type="Upvote"]');
            var $voteCount = (type === 'Upvote') ? $('#upvote-count') : $('#downvote-count');
            var $otherVoteCount = (type === 'Upvote') ? $('#downvote-count') : $('#upvote-count');

            if ($btn.hasClass('active')) {
                // If the button is already active (voted), unvote it
                $btn.removeClass('active');
                $btn.attr("IsVoted", "false");
                $voteCount.text(parseInt($voteCount.text()) - 1);
            } else {
                // If the other button is active (voted), unvote it
                if ($otherBtn.hasClass('active')) {
                    $otherBtn.removeClass('active');
                    $otherBtn.attr("IsVoted", "false");
                    $otherVoteCount.text(parseInt($otherVoteCount.text()) - 1);
                }

                // Toggle active state of the clicked button
                $btn.addClass('active');

                // increment the vote count on the client-side
                $voteCount.text(parseInt($voteCount.text()) + 1);
            }

            var reaction = {
                Type: type,
                EntityId: $btn.attr("EntityId"), //  ID of the blog or comment
                EntityType: $btn.attr("category") // entity type (e.g., 'Blog' or 'Comment')
            };

            updateReactionStatus(reaction);
        }

        function updateReactionStatus(reaction) {
            $.ajax({
                url: '/Reaction/UpdateReactionStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(reaction),
                success: function (response) {

                    toastr.success(`${reaction.Type}`);
                },
                error: function (xhr, status, error) {
                    toastr.error(`Not Reacted`);
                }
            });
        }

        //js for post comment and reply
        $(".commentBtn").click(function () {

            var comment = {
                Content: $(this).closest("form").find('textarea').val(),

                BlogId: $(".vote-btn").attr("EntityId")
            }
            postComment(comment);
        });

        function postComment(comment) {
            $.ajax({
                url: '/Comment/PostComment',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(comment),
                success: function (response) {
                    toastr.success('Comment posted successfully');
                    var notification ={
                        Title: 'Comment Notificaion',
                        Body: 'Comment On Your Blog',
                        BlogId: $(".blogDetails").attr('blog-id')
                    }
                    AddNotification(notification);
                },
                error: function (xhr, status, error) {

                    toastr.error('Failed to update comment');
                }
            });
        }

        $(".cmtReplyBtn").click(function () {
            if ($(this).closest(".comment").find(".replyContainer").length < 1) {
                var commentId = $(this).attr("comment-id");
                $(this).closest(".comment").append(`<div class="col mt-2 form-group replyContainer">
                                            <textarea name="comment" class="form-control commentReply" placeholder="Your Reply"> </textarea>
                                             <button type="button" comment-id="${commentId}" class="btn btn-sm mt-1 postreplyBtn btn-primary">Post</button>
                                             <button type="button" class="btn btn-sm  mt-1 cancelReplyBtn btn-secondary">Cancel</button>
                                        </div>`);
            }
        });

        $(document).on('click', '.cancelReplyBtn', function () {
            $(this).closest('.replyContainer').remove();
        })

        //code for posting the reply comment messages
        $(document).on('click', '.postreplyBtn', function () {
            var replyMsg = $(this).closest('.replyContainer').find("textarea").val();
            var commentId = $(this).attr("comment-id");

            var commentReply = {
                Content: replyMsg,
                CommentId: commentId
            };

            $.ajax({
                url: '/Comment/AddNestedReply',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(commentReply),
                success: function (response) {
                    toastr.success('Reply updated successfully');
                    $(".cancelReplyBtn").trigger('click');
                },
                error: function (xhr, status, error) {
                    console.error('Error updating reply status:', error);
                    // Show an error notification
                    toastr.error('An error occurred');
                }
            });
        });

        //remove comments
        $(document).on('click', '.removeCmtBtn ', function () {
            var id = $(this).attr('entityid');
            var commentEntity = $(this).closest('.comment');
            deleteComment(id, commentEntity);
        });

        function deleteComment(id, commentEntity) {
            $.ajax({
                url: '/Comment/DeleteComment/' + id,
                type: 'DELETE',
                success: function (response) {
                    toastr.success('Comment removed.');
                    // toastr.success(response);
                    $commentEntity.hide();
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    toastr.error('Error deleting comment');
                }
            });
        }

        function AddNotification(notification) {
            $.ajax({
                url: '/Notifications/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(notification),
                success: function (response) {
                    console.log("Notification added successfully");
                },
                error: function (xhr, status, error) {
                    console.log("Notification added successfully");
                }
            });
        }



    });

</script>